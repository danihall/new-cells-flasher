{"version":3,"file":"static/js/233.0c93b4a4.chunk.js","mappings":"gTA8DA,UA3CgB,WACd,IAAMA,GAA0BC,EAAAA,EAAAA,MAC1BC,GAAsBC,EAAAA,EAAAA,MAE5B,GAAIH,EAAU,CACZ,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,EAAgBN,EAAWO,KAAKC,KAAKR,EAASS,QAAU,EAQ9D,OANAC,EAAAA,EAAAA,YAAU,WACRN,GAASO,EAAAA,EAAAA,OACTP,GAASQ,EAAAA,EAAAA,KAAoB,IAC7BR,GAASS,EAAAA,EAAAA,KAAc,GACzB,GAAG,KAGD,iCACE,SAAC,IAAK,UAAC,cACP,UAAC,IAAa,YACZ,SAAC,IAAK,CAACC,YAAaR,EAAeS,gBAAiBf,KACpD,SAAC,IAAK,CAACgB,eAAe,EAAOC,iBAAkBX,QAGjD,UAAC,IAAe,YACd,oBACA,SAAC,IAAK,KACN,4BACE,SAAC,IAAW,CAACY,eAAe,IAC3BC,EAAAA,IAA2B,SAAC,IAAa,IAAM,WAGnDjB,GACC,SAAC,IAAY,CACXkB,KAAMlB,EAAUmB,GAAK,UAAY,QACjCC,KAAMpB,EAAUoB,OAEhB,OAGV,CAEA,OAAO,uBAAG,gCACZ,C","sources":["pages/LastArt.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLoaderData, useActionData } from \"react-router-dom\";\n\nimport ArtFooterLayout from \"../components/ArtFooterLayout/ArtFooterLayout\";\nimport ArtMainLayout from \"../components/ArtMainLayout/ArtMainLayout\";\nimport ArtRegisterer from \"../components/ArtRegisterer/ArtRegisterer\";\nimport ButtonReset from \"../components/ButtonReset/ButtonReset\";\nimport { Cells } from \"../components/CellsController/CellsController\";\nimport Lines from \"../components/Lines/Lines\";\nimport Timer from \"../components/Timer/Timer\";\nimport Title from \"../components/Title/Title\";\nimport ToastMessage from \"../components/ToastMessage/ToastMessage\";\nimport { TCells } from \"../custom_types/cells\";\nimport { art_storage_is_available, IProcess } from \"../helpers/artStorage\";\nimport { setCountdownReached } from \"../store/features/countdownIsReached\";\nimport { drawingIsDone } from \"../store/features/linesAreDrawn\";\nimport { setNewRoundInProgress } from \"../store/features/newRoundInProgress\";\n\nconst LastArt = (): JSX.Element => {\n  const last_art: TCells | null = useLoaderData() as TCells | null;\n  const art_added: IProcess = useActionData() as IProcess;\n\n  if (last_art) {\n    const dispatch = useDispatch();\n    const cells_per_row = last_art ? Math.sqrt(last_art.length) : 0;\n\n    useEffect(() => {\n      dispatch(setNewRoundInProgress());\n      dispatch(setCountdownReached(false));\n      dispatch(drawingIsDone(true));\n    }, []);\n\n    return (\n      <>\n        <Title>Last Art</Title>\n        <ArtMainLayout>\n          <Cells cellsPerRow={cells_per_row} forceCellsArray={last_art} />\n          <Lines shouldAnimate={false} forceCellsPerRow={cells_per_row} />\n        </ArtMainLayout>\n\n        <ArtFooterLayout>\n          <div></div>\n          <Timer />\n          <div>\n            <ButtonReset resetAllCells={false} />\n            {art_storage_is_available ? <ArtRegisterer /> : null}\n          </div>\n        </ArtFooterLayout>\n        {art_added ? (\n          <ToastMessage\n            type={art_added.ok ? \"success\" : \"error\"}\n            text={art_added.text}\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  return <p>There are no last art saved!</p>;\n};\n\nexport default LastArt;\n"],"names":["last_art","useLoaderData","art_added","useActionData","dispatch","useDispatch","cells_per_row","Math","sqrt","length","useEffect","setNewRoundInProgress","setCountdownReached","drawingIsDone","cellsPerRow","forceCellsArray","shouldAnimate","forceCellsPerRow","resetAllCells","art_storage_is_available","type","ok","text"],"sourceRoot":""}