{"version":3,"file":"static/js/669.c8dacd14.chunk.js","mappings":"qSACA,EAA8B,qC,SC4D9B,EAhDwB,WACtB,IAAMA,GAAwBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1C,GAA0BC,EAAAA,EAAAA,UAAS,GAAD,OAAIH,IAAwB,eAAvDI,EAAK,KAAEC,EAAQ,KAChBC,GAAQC,EAAAA,EAAAA,MACRC,GAAWC,EAAAA,EAAAA,MAEXC,GAAeC,EAAAA,EAAAA,cACnB,SAACC,GAAoC,OAAKP,EAASO,EAAMC,OAAOT,MAAM,GACtE,IAGIU,GAAkBH,EAAAA,EAAAA,cACtB,SAACC,GACC,IACgBG,EACZT,EAAMU,WADRC,WAAcF,cAEVG,GAAaN,EAAMO,cAAcf,MAEnCW,IAAkBG,IACpBV,GAASY,EAAAA,EAAAA,IAAeF,IACxBV,GAASa,EAAAA,EAAAA,KAAoB,IAEjC,GACA,IAGF,OACE,4BACE,kBACEC,UAAWC,EACXC,GAAG,gBACHC,KAAK,QACLC,KAAK,gBACLC,IAAKC,EAAAA,GACLC,IAAKC,EAAAA,GACLC,KAAK,IACL3B,MAAOA,EACP4B,SAAUtB,EACVuB,YAAanB,KAEf,mBAAOoB,QAAQ,gBAAe,WAC5B,0BAAM,oBACN,0BAAO9B,SAIf,E,kDCdA,EA/Be,WACb,IAAM+B,GAAsBC,EAAAA,EAAAA,MAE5B,OACE,iCACE,SAACC,EAAA,EAAK,UAAC,aAEP,UAACC,EAAA,EAAa,YACZ,SAACC,EAAA,EAAe,KAChB,SAACC,EAAA,EAAK,QAGR,UAACC,EAAA,EAAe,YACd,SAAC,EAAe,KAChB,SAACC,EAAA,EAAK,KACN,4BACE,SAACC,EAAA,EAAW,IACXC,EAAAA,IAA2B,SAAC,IAAc,IAAM,WAIpDT,GACC,SAACU,EAAA,EAAY,CACXpB,KAAMU,EAAUW,GAAK,UAAY,QACjCC,KAAMZ,EAAUY,OAEhB,OAGV,C","sources":["webpack://cells-flasher-react/./src/components/InputCellsCount/InputCellsCount.module.scss?47b4","components/InputCellsCount/InputCellsCount.tsx","pages/NewArt.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input-range\":\"InputCellsCount_input-range__9ItLt\"};","import { useState, useCallback, ChangeEvent, PointerEvent } from \"react\";\nimport { useDispatch, useSelector, useStore } from \"react-redux\";\n\nimport { MIN_CELLS_PER_ROW, MAX_CELLS_PER_ROW } from \"../../constants\";\nimport {\n  setCellsPerRow,\n  selectCellsPerRow,\n} from \"../../store/features/cellsState\";\nimport { setCountdownReached } from \"../../store/features/countdownIsReached\";\nimport { RootState } from \"../../store/store\";\n\nimport css from \"./InputCellsCount.module.scss\";\n\nconst InputCellsCount = (): JSX.Element => {\n  const current_cells_per_row = useSelector(selectCellsPerRow);\n  const [value, setValue] = useState(`${current_cells_per_row}`);\n  const store = useStore();\n  const dispatch = useDispatch();\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => setValue(event.target.value),\n    []\n  );\n\n  const handlePointerUp = useCallback(\n    (event: PointerEvent<HTMLInputElement>) => {\n      const {\n        cellsState: { cells_per_row },\n      } = store.getState() as RootState;\n      const new_value = +event.currentTarget.value;\n\n      if (cells_per_row !== new_value) {\n        dispatch(setCellsPerRow(new_value));\n        dispatch(setCountdownReached(false));\n      }\n    },\n    []\n  );\n\n  return (\n    <div>\n      <input\n        className={css[\"input-range\"]}\n        id=\"cells_per_row\"\n        type=\"range\"\n        name=\"cells_per_row\"\n        min={MIN_CELLS_PER_ROW}\n        max={MAX_CELLS_PER_ROW}\n        step=\"1\"\n        value={value}\n        onChange={handleChange}\n        onPointerUp={handlePointerUp}\n      />\n      <label htmlFor=\"cells_per_row\">\n        <span>cells per row:</span>\n        <span>{value}</span>\n      </label>\n    </div>\n  );\n};\n\nexport default InputCellsCount;\n","import { useActionData } from \"react-router-dom\";\n\nimport ArtFooterLayout from \"../components/ArtFooterLayout/ArtFooterLayout\";\nimport ArtMainLayout from \"../components/ArtMainLayout/ArtMainLayout\";\nimport ArtsRegisterer from \"../components/ArtRegisterer/ArtRegisterer\";\nimport ButtonReset from \"../components/ButtonReset/ButtonReset\";\nimport CellsController from \"../components/CellsController/CellsController\";\nimport InputCellsCount from \"../components/InputCellsCount/InputCellsCount\";\nimport Lines from \"../components/Lines/Lines\";\nimport Timer from \"../components/Timer/Timer\";\nimport Title from \"../components/Title/Title\";\nimport ToastMessage from \"../components/ToastMessage/ToastMessage\";\nimport { IProcess, art_storage_is_available } from \"../helpers/artStorage\";\n\nconst NewArt = () => {\n  const art_added: IProcess = useActionData() as IProcess;\n\n  return (\n    <>\n      <Title>New Art</Title>\n\n      <ArtMainLayout>\n        <CellsController />\n        <Lines />\n      </ArtMainLayout>\n\n      <ArtFooterLayout>\n        <InputCellsCount />\n        <Timer />\n        <div>\n          <ButtonReset />\n          {art_storage_is_available ? <ArtsRegisterer /> : null}\n        </div>\n      </ArtFooterLayout>\n\n      {art_added ? (\n        <ToastMessage\n          type={art_added.ok ? \"success\" : \"error\"}\n          text={art_added.text}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default NewArt;\n"],"names":["current_cells_per_row","useSelector","selectCellsPerRow","useState","value","setValue","store","useStore","dispatch","useDispatch","handleChange","useCallback","event","target","handlePointerUp","cells_per_row","getState","cellsState","new_value","currentTarget","setCellsPerRow","setCountdownReached","className","css","id","type","name","min","MIN_CELLS_PER_ROW","max","MAX_CELLS_PER_ROW","step","onChange","onPointerUp","htmlFor","art_added","useActionData","Title","ArtMainLayout","CellsController","Lines","ArtFooterLayout","Timer","ButtonReset","art_storage_is_available","ToastMessage","ok","text"],"sourceRoot":""}