{"version":3,"file":"static/js/877.aa28f77e.chunk.js","mappings":"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","sources":["components/ArtFooterLayout/ArtFooterLayout.tsx","webpack://cells-flasher-react/./src/components/ArtFooterLayout/ArtFooterLayout.module.scss?925d","components/ArtMainLayout/ArtMainLayout.tsx","webpack://cells-flasher-react/./src/components/ArtMainLayout/ArtMainLayout.module.scss?6688","webpack://cells-flasher-react/./src/components/ArtRegisterer/ArtRegisterer.module.scss?751a","components/ArtRegisterer/ArtRegisterer.tsx","webpack://cells-flasher-react/./src/components/Button/Button.module.scss?f17a","components/Button/Button.tsx","components/ButtonReset/ButtonReset.tsx","helpers/cellsLineChecker.ts","helpers/computeResult.ts","webpack://cells-flasher-react/./src/components/CellsController/CellsController.module.scss?cc4c","components/CellsController/CellsController.tsx","helpers/animateLine.ts","webpack://cells-flasher-react/./src/components/Lines/Lines.module.scss?aa53","components/Lines/Lines.tsx","webpack://cells-flasher-react/./src/components/Timer/Timer.module.scss?5f3a","components/Timer/Timer.tsx","webpack://cells-flasher-react/./src/components/ToastMessage/ToastMessage.module.scss?b713","components/ToastMessage/ToastMessage.tsx","helpers/animationHelpers.ts","pages/LastArt.tsx"],"sourcesContent":["import { IHOC } from \"../../custom_types/hoc\";\nimport rootCss from \"../../index.module.scss\";\n\nimport css from \"./ArtFooterLayout.module.scss\";\n\nconst className = [css[\"game-footer\"], rootCss[\"margin-top\"]].join(\" \");\n\nconst ArtFooterLayout = ({ children }: IHOC): JSX.Element => {\n  return <div className={className}>{children}</div>;\n};\n\nexport default ArtFooterLayout;\n","// extracted by mini-css-extract-plugin\nexport default {\"game-footer\":\"ArtFooterLayout_game-footer__9UWUd\"};","import { IHOC } from \"../../custom_types/hoc\";\nimport rootCss from \"../../index.module.scss\";\n\nimport css from \"./ArtMainLayout.module.scss\";\n\nconst className = [css.game, rootCss[\"margin-top\"]].join(\" \");\n\nconst ArtMainLayout = ({ children }: IHOC): JSX.Element => {\n  return <div className={className}>{children}</div>;\n};\n\nexport default ArtMainLayout;\n","// extracted by mini-css-extract-plugin\nexport default {\"game\":\"ArtMainLayout_game__4ojcY\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"ArtRegisterer_dialog__7AlqE\"};","import { ChangeEvent, FormEvent, useCallback, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useSubmit } from \"react-router-dom\";\n\nimport rootCss from \"../../index.module.scss\";\nimport { selectCountdown } from \"../../store/features/countdownIsReached\";\nimport Button from \"../Button/Button\";\n\nimport css from \"./ArtRegisterer.module.scss\";\n\nconst ArtRegisterer = (): JSX.Element => {\n  const countdown_is_reached = useSelector(selectCountdown);\n  const [value, setValue] = useState(\"\");\n  const submit = useSubmit();\n\n  const dialog_form = useRef<HTMLDialogElement>(null);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  }, []);\n\n  const registerArt = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    submit(event.currentTarget);\n    dialog_form.current?.close();\n  };\n\n  return (\n    <>\n      <Button\n        disabled={!countdown_is_reached}\n        onClick={() => dialog_form.current?.showModal()}\n      >\n        Register Art\n      </Button>\n\n      <dialog className={css.dialog} id=\"dialog-form\" ref={dialog_form}>\n        <form method=\"post\" onSubmit={registerArt}>\n          <div>\n            <div>\n              <label htmlFor=\"name\">Name:</label>\n              <input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                required\n                placeholder=\"type any name for this pixel art\"\n                value={value}\n                onChange={handleChange}\n              />\n            </div>\n\n            <div className={rootCss[\"margin-top\"]}>\n              <label htmlFor=\"description\">Description:</label>\n              <textarea\n                id=\"description\"\n                name=\"description\"\n                placeholder=\"type an optional description\"\n              />\n            </div>\n          </div>\n\n          <div className={rootCss[\"margin-top\"]}>\n            <Button type=\"button\" onClick={() => dialog_form.current?.close()}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">Validate Art</Button>\n          </div>\n        </form>\n      </dialog>\n    </>\n  );\n};\n\nexport default ArtRegisterer;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__JBBzO\"};","import { ComponentProps } from \"react\";\n\nimport { IHOC } from \"../../custom_types/hoc\";\n\nimport css from \"./Button.module.scss\";\n\nconst Button = ({\n  children,\n  ...props\n}: IHOC & ComponentProps<\"button\">): JSX.Element => {\n  return (\n    <button className={css.button} {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  setCountdownReached,\n  selectCountdown,\n} from \"../../store/features/countdownIsReached\";\nimport { setNewRoundInProgress } from \"../../store/features/newRoundInProgress\";\nimport { resetCellsKey } from \"../../store/features/resetCells\";\nimport Button from \"../Button/Button\";\n\nconst ButtonReset = ({ resetAllCells = true }): JSX.Element => {\n  const countdown_is_reached = useSelector(selectCountdown);\n  const dispatch = useDispatch();\n\n  const handleClick = useCallback(() => {\n    dispatch(setCountdownReached(false));\n    dispatch(setNewRoundInProgress());\n\n    if (resetAllCells) {\n      dispatch(resetCellsKey());\n    }\n  }, []);\n\n  return (\n    <Button disabled={!countdown_is_reached} onClick={handleClick}>\n      Reset\n    </Button>\n  );\n};\n\nexport default ButtonReset;\n","type TCells = Array<null | string>;\ntype TCheck = false | Array<number>;\ninterface IParams {\n  i: number;\n  cells_per_row: number;\n  cells: TCells;\n}\nconst cellsLineChecker = {\n  _check(indexes: Array<number>, cells: TCells) {\n    return (\n      cells[indexes[0]] === cells[indexes[1]] &&\n      cells[indexes[1]] === cells[indexes[2]] &&\n      indexes\n    );\n  },\n  horizontal({ i, cells }: IParams): TCheck {\n    const indexes = [i, i + 1, i + 2];\n    return this._check(indexes, cells);\n  },\n  vertical({ i, cells_per_row, cells }: IParams): TCheck {\n    const indexes = [i, i + cells_per_row, i + cells_per_row * 2];\n    return this._check(indexes, cells);\n  },\n  diagonalRight({ i, cells_per_row, cells }: IParams): TCheck {\n    if (cells_per_row - (i % cells_per_row) < 3) {\n      return false;\n    }\n    const indexes = [i, i + cells_per_row + 1, i + cells_per_row * 2 + 2];\n    return this._check(indexes, cells);\n  },\n  diagonalLeft({ i, cells_per_row, cells }: IParams): TCheck {\n    if (i % cells_per_row < 2) {\n      return false;\n    }\n    const indexes = [i, i + cells_per_row - 1, i + cells_per_row * 2 - 2];\n    return this._check(indexes, cells);\n  },\n};\n\nexport { cellsLineChecker };\n","import { cellsLineChecker } from \"./cellsLineChecker\";\n\n//type Tresult = Array<number>;\n\nconst computeResult = (\n  cells: Array<null | string>,\n  cells_per_row: number\n): Array<number> => {\n  const winning_lines: Array<Array<number>> = [];\n  const params = {\n    i: 0,\n    cells,\n    cells_per_row,\n  };\n\n  cells.forEach((cell, index, array) => {\n    if (!cell || index >= array.length - 2) {\n      return;\n    }\n\n    params.i = index;\n\n    [\n      cellsLineChecker.horizontal(params),\n      cellsLineChecker.vertical(params),\n      cellsLineChecker.diagonalRight(params),\n      cellsLineChecker.diagonalLeft(params),\n    ].forEach((line) => {\n      if (line && line.length) {\n        winning_lines.push(line);\n      }\n    });\n  });\n\n  return winning_lines.flat();\n};\n\nexport { computeResult };\n","// extracted by mini-css-extract-plugin\nexport default {\"cells\":\"CellsController_cells__tOX0j\",\"player-x\":\"CellsController_player-x__Aau8H\",\"player-o\":\"CellsController_player-o__MSW80\",\"is--winner-move\":\"CellsController_is--winner-move__yF+Ky\",\"flash\":\"CellsController_flash__750Kn\"};","import { useState, useCallback, CSSProperties } from \"react\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\n\nimport { TCells } from \"../../custom_types/cells\";\nimport { computeResult } from \"../../helpers/computeResult\";\nimport { makeArray } from \"../../helpers/makeArray\";\nimport {\n  updateCellsState,\n  selectCellsPerRow,\n} from \"../../store/features/cellsState\";\nimport { setNewRoundInProgress } from \"../../store/features/newRoundInProgress\";\nimport { selectCellsKey } from \"../../store/features/resetCells\";\nimport { RootState } from \"../../store/store\";\n\nimport css from \"./CellsController.module.scss\";\n\ninterface ICellsProps {\n  cellsPerRow: number;\n  forceCellsArray?: TCells | null;\n  isPlayable?: boolean;\n}\n\ntype TWinningMoves = Array<number>;\n\n/**\n * This container provides a way to reset the state of Cells by way of the \"key\" prop update.\n * This allows to efficiently re-render Cells when user changes the number of cells per row.\n * Surprisingly, it is way faster than setting a \"forceCellsArray\" prop on a store and accessing it via redux.\n */\nconst CellsController = (): JSX.Element => {\n  const cells_per_row = useSelector(selectCellsPerRow);\n  const cells_key = useSelector(selectCellsKey);\n\n  return <Cells cellsPerRow={cells_per_row} key={cells_key + cells_per_row} />;\n};\n\nconst Cells = ({\n  cellsPerRow,\n  forceCellsArray = null,\n  isPlayable = true,\n}: ICellsProps): JSX.Element => {\n  const store = useStore();\n  const [cells, setCells] = useState<TCells>(\n    forceCellsArray ? forceCellsArray : makeArray(cellsPerRow)\n  );\n  const [is_player_x, setPlayerTurn] = useState(true);\n  const [winning_moves, setWinningMoves] = useState<TWinningMoves>(\n    forceCellsArray\n      ? Array.from(new Set(computeResult(forceCellsArray, cellsPerRow)))\n      : []\n  );\n  const [can_draw, setCanDraw] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handlePointerEvent = useCallback(\n    (index: number) => () => {\n      const { linesAreDrawn, countdownIsReached } =\n        store.getState() as RootState;\n\n      if (!linesAreDrawn || countdownIsReached || cells[index]) {\n        return;\n      }\n\n      const new_cells = [...cells];\n      new_cells[index] = is_player_x ? \"x\" : \"o\";\n      const new_result = computeResult(new_cells, cellsPerRow);\n\n      setWinningMoves(Array.from(new Set([...winning_moves, ...new_result])));\n      setCells(new_cells);\n      setPlayerTurn(!is_player_x);\n\n      dispatch(updateCellsState(new_cells));\n      dispatch(setNewRoundInProgress());\n    },\n    [cells]\n  );\n\n  const setClassName = useCallback(\n    (winning_moves: TWinningMoves, cell: null | string, index: number) => {\n      if (cell) {\n        const cell_class: string = css[`player-${cell}`];\n        const winner_class: string =\n          winning_moves.indexOf(index) >= 0 ? css[\"is--winner-move\"] : \"\";\n\n        return [cell_class, winner_class].join(\" \");\n      }\n    },\n    []\n  );\n\n  const inline_style = {\n    \"--cells-per-row\": cellsPerRow,\n  } as CSSProperties;\n\n  return (\n    <div\n      {...{\n        style: inline_style,\n        className: css.cells,\n        ...(isPlayable && {\n          onPointerDown: () => setCanDraw(true),\n          onPointerUp: () => setCanDraw(false),\n          onPointerLeave: () => setCanDraw(false),\n        }),\n      }}\n    >\n      {cells.map((cell, index) => {\n        return (\n          <div\n            {...{\n              className: setClassName(winning_moves, cell, index),\n              key: index.toString(),\n              ...(isPlayable && {\n                onPointerMove: can_draw ? handlePointerEvent(index) : undefined,\n                onClick: handlePointerEvent(index),\n              }),\n            }}\n          >\n            {cell}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CellsController;\nexport { Cells };\n","import { restartAnimation } from \"./animationHelpers\";\n\n/**\n * Takes advantage of the fact that a Tagged Template Literal uses a \"frozen\" Array,\n * wherer the \"chunks\" are always the same.\n * This makes creating multiple different string from the same Tagged Template Literal faster.\n */\nconst template = (chunks: TemplateStringsArray, rest: number): string =>\n  chunks[0] + rest + chunks[1];\nconst createDelayString = (index: number): string =>\n  template`animation-delay: ${index}ms`;\n\nconst animateLine = (\n  index: number,\n  middle_line_index: number,\n  lines_vertical: Array<HTMLDivElement>,\n  lines_horizontal: Array<HTMLDivElement>\n) => {\n  const line_left = lines_vertical[index];\n  const line_top = lines_horizontal[index];\n\n  if (index === middle_line_index && lines_vertical.length % 2 !== 0) {\n    line_left.style.cssText = createDelayString(0);\n    line_top.style.cssText = createDelayString(0);\n    restartAnimation(lines_vertical[index]);\n    restartAnimation(lines_horizontal[index]);\n    return;\n  }\n\n  const line_right = lines_vertical[lines_vertical.length - 1 - index];\n  const line_bottom = lines_horizontal[lines_horizontal.length - 1 - index];\n  const delay = (middle_line_index - index) * 100;\n  line_left.style.cssText = createDelayString(delay);\n  line_right.style.cssText = createDelayString(delay);\n  line_top.style.cssText = createDelayString(delay);\n  line_bottom.style.cssText = createDelayString(delay);\n  restartAnimation(line_left);\n  restartAnimation(line_right);\n  restartAnimation(line_top);\n  restartAnimation(line_bottom);\n};\n\nexport { animateLine };\n","// extracted by mini-css-extract-plugin\nexport default {\"lines\":\"Lines_lines__xsbb6\",\"horizontal\":\"Lines_horizontal__SgmyJ\",\"draw_line\":\"Lines_draw_line__CHmCR\",\"vertical\":\"Lines_vertical__WdV4h\",\"no-animation\":\"Lines_no-animation__UhLB3\"};","import { useRef, useEffect, useCallback, memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { animateLine } from \"../../helpers/animateLine\";\nimport { selectCellsPerRow } from \"../../store/features/cellsState\";\nimport { drawingIsDone } from \"../../store/features/linesAreDrawn\";\n\nimport css from \"./Lines.module.scss\";\n\ninterface ILinesProps {\n  shouldAnimate?: boolean;\n  forceCellsPerRow?: number;\n}\n\ninterface ILinesRef {\n  current: Array<HTMLDivElement>;\n}\n\nconst css_vertical = [css.lines, css.vertical].join(\" \");\nconst css_horizontal = [css.lines, css.horizontal].join(\" \");\n\nconst Lines = memo(\n  ({\n    shouldAnimate = true,\n    forceCellsPerRow = 0,\n  }: ILinesProps): JSX.Element => {\n    const cells_per_row = forceCellsPerRow\n      ? forceCellsPerRow\n      : useSelector(selectCellsPerRow);\n    const lines_count = (cells_per_row - 1) * 2;\n    const lines_vertical: ILinesRef = useRef([]);\n    const lines_horizontal: ILinesRef = useRef([]);\n    const dispatch = useDispatch();\n\n    const addToLines = useCallback(\n      (line: HTMLDivElement | null, index: number) => {\n        if (line) {\n          const ref = lines_vertical.current[index]\n            ? lines_horizontal.current\n            : lines_vertical.current;\n          ref.push(line);\n        }\n      },\n      [cells_per_row]\n    );\n\n    const handleAnimationEnd = () => {\n      dispatch(drawingIsDone(true));\n    };\n\n    useEffect(() => {\n      if (!shouldAnimate) {\n        return;\n      }\n\n      if (lines_vertical.current.length) {\n        const middle_line = Math.floor(lines_vertical.current.length / 2);\n\n        dispatch(drawingIsDone(false));\n\n        /** Restart animations */\n        for (let i = 0; i <= middle_line; i++) {\n          animateLine(\n            i,\n            middle_line,\n            lines_vertical.current,\n            lines_horizontal.current\n          );\n        }\n      }\n\n      lines_vertical.current.length = 0;\n      lines_horizontal.current.length = 0;\n    }, [cells_per_row]);\n\n    return (\n      <>\n        <div\n          className={\n            shouldAnimate\n              ? css_vertical\n              : `${css_vertical} ${css[\"no-animation\"]}`\n          }\n        >\n          {Array.from({ length: lines_count / 2 }, (_, index) => (\n            <div\n              key={index.toString()}\n              ref={shouldAnimate ? (line) => addToLines(line, index) : null}\n              onAnimationEnd={index === 0 ? handleAnimationEnd : undefined}\n            ></div>\n          ))}\n        </div>\n\n        <div\n          className={\n            shouldAnimate\n              ? css_horizontal\n              : `${css_horizontal} ${css[\"no-animation\"]}`\n          }\n        >\n          {Array.from({ length: lines_count / 2 }, (_, index) => (\n            <div\n              key={index.toString()}\n              ref={shouldAnimate ? (line) => addToLines(line, index) : null}\n            ></div>\n          ))}\n        </div>\n      </>\n    );\n  }\n);\n\nexport default Lines;\n","// extracted by mini-css-extract-plugin\nexport default {\"svg\":\"Timer_svg__WBl-h\",\"draw_dash\":\"Timer_draw_dash__vW7lh\",\"hidden\":\"Timer_hidden__tlz+K\"};","import { useRef, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useSubmit } from \"react-router-dom\";\n\nimport { LAST_ART_NAME } from \"../../constants\";\nimport {\n  restartAnimation,\n  pauseAnimation,\n} from \"../../helpers/animationHelpers\";\nimport { setCountdownReached } from \"../../store/features/countdownIsReached\";\nimport { selectLinesAreDrawn } from \"../../store/features/linesAreDrawn\";\nimport { selectNewRoundInProgress } from \"../../store/features/newRoundInProgress\";\n\nimport css from \"./Timer.module.scss\";\n\nconst Timer = (): JSX.Element => {\n  const lines_are_drawn = useSelector(selectLinesAreDrawn);\n  const new_round_in_progress = useSelector(selectNewRoundInProgress);\n\n  const dispatch = useDispatch();\n  const submit = useSubmit();\n\n  const circle = useRef<SVGCircleElement>(null);\n  const className = css.svg + (lines_are_drawn ? \"\" : ` ${css.hidden}`);\n\n  const handleAnimationEnd = () => {\n    const form_data = new FormData();\n    form_data.append(LAST_ART_NAME, \"\");\n\n    submit(form_data, { method: \"post\" });\n    dispatch(setCountdownReached(true));\n  };\n\n  useEffect(() => {\n    pauseAnimation(circle.current);\n\n    if (lines_are_drawn) {\n      circle.current?.addEventListener(\"animationend\", handleAnimationEnd);\n      dispatch(setCountdownReached(false));\n      restartAnimation(circle.current);\n    }\n\n    return () =>\n      circle.current?.removeEventListener(\"animationend\", handleAnimationEnd);\n  }, [new_round_in_progress, lines_are_drawn]);\n\n  return (\n    <svg\n      className={className}\n      width=\"60px\"\n      height=\"60px\"\n      viewBox=\"0 0 60 60\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle\n        ref={circle}\n        cx=\"30\"\n        cy=\"30\"\n        r=\"28\"\n        pathLength=\"1\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeWidth=\"4px\"\n        strokeDasharray=\"1\"\n        strokeDashoffset=\"1\"\n        fill=\"none\"\n      />\n    </svg>\n  );\n};\n\nexport default Timer;\n","// extracted by mini-css-extract-plugin\nexport default {\"toast\":\"ToastMessage_toast__hy1BO\",\"slideUp\":\"ToastMessage_slideUp__g5bH0\",\"success\":\"ToastMessage_success__ZwIRW\",\"error\":\"ToastMessage_error__1aR33\"};","import { useEffect, useRef } from \"react\";\n\nimport { restartAnimation } from \"../../helpers/animationHelpers\";\n\nimport css from \"./ToastMessage.module.scss\";\n\ninterface IToastMessageProps {\n  type: \"error\" | \"success\";\n  text: string;\n}\n\nconst ToastMessage = ({ type, text }: IToastMessageProps): JSX.Element => {\n  const toast = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    restartAnimation(toast.current);\n  }, [type, text]);\n\n  return (\n    <div ref={toast} className={`${css.toast} ${css[type]}`}>\n      {text}\n    </div>\n  );\n};\n\nexport default ToastMessage;\n","type TElement = HTMLElement | SVGCircleElement | null;\n\nconst _getAnimation = (element: TElement) => {\n  if (!element) {\n    return;\n  }\n\n  return element.getAnimations()?.[0];\n};\n\nconst restartAnimation = (element: TElement) => {\n  const animation = _getAnimation(element);\n  animation?.cancel();\n  animation?.play();\n};\n\nconst pauseAnimation = (element: TElement) => {\n  const animation = _getAnimation(element);\n  animation?.pause();\n};\n\nconst forceAnimationEnd = (element: TElement) => {\n  const animation = _getAnimation(element);\n  animation?.finish();\n};\n\nconst reverseAnimation = (element: TElement) => {\n  const animation = _getAnimation(element);\n  animation?.reverse();\n};\n\nexport {\n  restartAnimation,\n  pauseAnimation,\n  forceAnimationEnd,\n  reverseAnimation,\n};\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLoaderData, useActionData } from \"react-router-dom\";\n\nimport ArtFooterLayout from \"../components/ArtFooterLayout/ArtFooterLayout\";\nimport ArtMainLayout from \"../components/ArtMainLayout/ArtMainLayout\";\nimport ArtRegisterer from \"../components/ArtRegisterer/ArtRegisterer\";\nimport ButtonReset from \"../components/ButtonReset/ButtonReset\";\nimport { Cells } from \"../components/CellsController/CellsController\";\nimport Lines from \"../components/Lines/Lines\";\nimport Timer from \"../components/Timer/Timer\";\nimport Title from \"../components/Title/Title\";\nimport ToastMessage from \"../components/ToastMessage/ToastMessage\";\nimport { TCells } from \"../custom_types/cells\";\nimport { art_storage_is_available, IProcess } from \"../helpers/artStorage\";\nimport { setCountdownReached } from \"../store/features/countdownIsReached\";\nimport { drawingIsDone } from \"../store/features/linesAreDrawn\";\nimport { setNewRoundInProgress } from \"../store/features/newRoundInProgress\";\n\nconst LastArt = (): JSX.Element => {\n  const last_art: TCells | null = useLoaderData() as TCells | null;\n  const art_added: IProcess = useActionData() as IProcess;\n\n  if (last_art) {\n    const dispatch = useDispatch();\n    const cells_per_row = last_art ? Math.sqrt(last_art.length) : 0;\n\n    useEffect(() => {\n      dispatch(setNewRoundInProgress());\n      dispatch(setCountdownReached(false));\n      dispatch(drawingIsDone(true));\n    }, []);\n\n    return (\n      <>\n        <Title>Last Art</Title>\n        <ArtMainLayout>\n          <Cells cellsPerRow={cells_per_row} forceCellsArray={last_art} />\n          <Lines shouldAnimate={false} forceCellsPerRow={cells_per_row} />\n        </ArtMainLayout>\n\n        <ArtFooterLayout>\n          <div></div>\n          <Timer />\n          <div>\n            <ButtonReset resetAllCells={false} />\n            {art_storage_is_available ? <ArtRegisterer /> : null}\n          </div>\n        </ArtFooterLayout>\n        {art_added ? (\n          <ToastMessage\n            type={art_added.ok ? \"success\" : \"error\"}\n            text={art_added.text}\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  return <p>There are no last art saved!</p>;\n};\n\nexport default LastArt;\n"],"names":["className","rootCss","join","children","countdown_is_reached","useSelector","selectCountdown","value","setValue","useState","submit","useSubmit","dialog_form","useRef","handleChange","useCallback","event","target","Button","disabled","onClick","current","showModal","css","id","ref","method","onSubmit","preventDefault","currentTarget","close","htmlFor","name","type","required","placeholder","onChange","props","resetAllCells","dispatch","useDispatch","handleClick","setCountdownReached","setNewRoundInProgress","resetCellsKey","cellsLineChecker","_check","indexes","cells","horizontal","i","this","vertical","cells_per_row","diagonalRight","diagonalLeft","computeResult","winning_lines","params","forEach","cell","index","array","length","line","push","flat","Cells","cellsPerRow","forceCellsArray","isPlayable","store","useStore","setCells","makeArray","is_player_x","setPlayerTurn","winning_moves","setWinningMoves","Array","from","Set","can_draw","setCanDraw","handlePointerEvent","linesAreDrawn","countdownIsReached","getState","new_cells","new_result","updateCellsState","setClassName","indexOf","inline_style","style","onPointerDown","onPointerUp","onPointerLeave","map","key","toString","onPointerMove","undefined","selectCellsPerRow","cells_key","selectCellsKey","template","chunks","rest","createDelayString","animateLine","middle_line_index","lines_vertical","lines_horizontal","line_left","line_top","cssText","restartAnimation","line_right","line_bottom","delay","css_vertical","css_horizontal","memo","shouldAnimate","forceCellsPerRow","lines_count","addToLines","handleAnimationEnd","drawingIsDone","useEffect","middle_line","Math","floor","_","onAnimationEnd","lines_are_drawn","selectLinesAreDrawn","new_round_in_progress","selectNewRoundInProgress","circle","form_data","FormData","append","LAST_ART_NAME","pauseAnimation","addEventListener","removeEventListener","width","height","viewBox","xmlns","cx","cy","r","pathLength","stroke","strokeLinecap","strokeWidth","strokeDasharray","strokeDashoffset","fill","text","toast","_getAnimation","element","getAnimations","animation","cancel","play","pause","last_art","useLoaderData","art_added","useActionData","sqrt","art_storage_is_available","ok"],"sourceRoot":""}